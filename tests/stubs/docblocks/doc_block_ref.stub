<?php

namespace A1\A2;
use Illuminate\Database\Eloquent\Builder as Eloquent;

/**
 * @mixin Eloquent test shod
 * @mixin \App\Eloquent
 * @see A
 */
class D {
	/**
	 * @var Logger|mixed[]
	 */
	private $logger;

   /**
	* @param Hello|string $var test Description.
	* @param Hello3|string $var1
	* @param Hello2|string $var2
	* @param ArrayIterator<int, string|null> $tokens
	*
	* @return Returny|null|$this|DOMElement[]
	*
	* @throws \Exception|bool|callable
	*/

	public function bar () {}
	    /**
         * @var ?User|array
         */
        private $user;

        /**
         * @var string|?Test
         */
        private $test;

    /**
     * @var Products<Product> $products
     * @var Collection<array|User> $users
     * @var Collection<Test<array<User2>>> $users
     */
    private $products;

    /*
     *
     *
     *
     *
     *
     */

     /**
      * @param array<int,mixed>|false $row
      *
      * @return list<mixed>|false
      * @param array<scalar|array> $value
      * @param array<int, resource> $streams
      */

    /**
     * @extends AbstractSchemaManager<SQLServerPlatform>
     * @return MockObject&Generator
     */

     /** @var 0|ColumnCase::LOWER|ColumnCase::UPPER */
     private int $case;

     /**
      * Creates a new named parameter and bind the value $value to it.
      *
      * This method provides a shortcut for {@see Statement::bindValue()}
      * when using prepared statements. {@var Cat $cat}
      * test empty {@return list<mixed>|false}
      * test multiple {@var Yellow<list<array<LaraCast>>> $users}
      */

	 /**
	  * Invalid docBlocks
	  *
	  *
	  *
	  * @param array<mixed>|?User3 $n
	  */

}
